--TABLE STRUCTURES
--DESC TBM_TAB1(TABLE IN ORCL11 DATABASE)

Name       Null? Type         
---------- ----- ------------ 
SNO              NUMBER       
DATE_TIME        TIMESTAMP(6) 
TRANSFERED       CHAR(1)

--DESC TBM_TAB2(TABLE IN DUP11 DATABASE)

Name       Null? Type         
---------- ----- ------------ 
SNO              NUMBER       
DATE_TIME        TIMESTAMP(6) 
TRANSFERED       CHAR(1)

--CREATING A DATABASE LINK

CREATE OR REPLACE DATABASE LINK DBL_ORCL11_ADMIN
CONNECT TO ADMIN IDENTIFIED BY admin
USING 'ORCL11';                                      --ORCL11 IS TNSNAME SPECIFIED IN TNSNAMES.ORA
 

--CREATING A PROCEDURE FOR TRANSEFERRING ROWS

CREATE OR REPLACE PROCEDURE PR_DBLINK_UPDATE AS 
--DECLARE
   TYPE V_ORCL11_INFO_TYPE IS TABLE OF TBM_TAB2%ROWTYPE;
   V_ORCL11_INFO V_ORCL11_INFO_TYPE;
BEGIN
   SELECT * BULK COLLECT INTO V_ORCL11_INFO FROM TBM_TAB1@DBL_ORCL11_ADMIN;
   FOR i IN V_ORCL11_INFO.FIRST..V_ORCL11_INFO.LAST
   LOOP
      IF V_ORCL11_INFO(i).TRANSFERED = 'N' THEN
         UPDATE TBM_TAB1@DBL_ORCL11_ADMIN 
            SET TRANSFERED='Y' 
               WHERE SNO = V_ORCL11_INFO(i).SNO;
               
         INSERT INTO TBM_TAB2(SNO,TRANSFERED)
            VALUES(V_ORCL11_INFO(i).SNO,'Y');
            
         COMMIT;
      END IF;
   END LOOP;

END PR_DBLINK_UPDATE;



--CREATING A JOB SCHEDULAR

BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
   job_name           =>  'JOB_COPY_TRANSFRED',
   job_type           =>  'STORED_PROCEDURE',
   job_action         =>  'ADMIN.PR_DBLINK_UPDATE',
   start_date         =>   'SYSTIMESTAMP',
   repeat_interval    =>  'FREQ=DAILY;BYHOUR=1', /* every other hour */
   comments           =>  'THIS TRANSEFERS ROW DATA FROM TB1 TO TB2 WITH VALUES TRANSFERED "Y"');
END;
/

--EXECUTING A JOB MANUALLY
BEGIN
  DBMS_SCHEDULER.RUN_JOB(
    JOB_NAME            => 'JOB_COPY_TRANSFRED',
    USE_CURRENT_SESSION => FALSE);
END;
/


